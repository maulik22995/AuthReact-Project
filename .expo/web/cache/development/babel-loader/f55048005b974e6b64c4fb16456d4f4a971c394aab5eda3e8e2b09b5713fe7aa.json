{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatButton from \"../ui/FlatButton\";\nimport AuthForm from \"./AuthForm\";\nimport { Colors } from \"../../constants/styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction AuthContent(_ref) {\n  var isLogin = _ref.isLogin,\n    onAuthenticate = _ref.onAuthenticate;\n  var _useState = useState({\n      email: false,\n      password: false,\n      confirmEmail: false,\n      confirmPassword: false\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    credentialsInvalid = _useState2[0],\n    setCredentialsInvalid = _useState2[1];\n  function switchAuthModeHandler() {}\n  function submitHandler(credentials) {\n    var email = credentials.email,\n      confirmEmail = credentials.confirmEmail,\n      password = credentials.password,\n      confirmPassword = credentials.confirmPassword;\n    email = email.trim();\n    password = password.trim();\n    var emailIsValid = email.includes('@');\n    var passwordIsValid = password.length > 6;\n    var emailsAreEqual = email === confirmEmail;\n    var passwordsAreEqual = password === confirmPassword;\n    if (!emailIsValid || !passwordIsValid || !isLogin && (!emailsAreEqual || !passwordsAreEqual)) {\n      Alert.alert('Invalid input', 'Please check your entered credentials.');\n      setCredentialsInvalid({\n        email: !emailIsValid,\n        confirmEmail: !emailIsValid || !emailsAreEqual,\n        password: !passwordIsValid,\n        confirmPassword: !passwordIsValid || !passwordsAreEqual\n      });\n      return;\n    }\n    onAuthenticate({\n      email: email,\n      password: password\n    });\n  }\n  return _jsxs(View, {\n    style: styles.authContent,\n    children: [_jsx(AuthForm, {\n      isLogin: isLogin,\n      onSubmit: submitHandler,\n      credentialsInvalid: credentialsInvalid\n    }), _jsx(View, {\n      style: styles.buttons,\n      children: _jsx(FlatButton, {\n        onPress: switchAuthModeHandler,\n        children: isLogin ? 'Create a new user' : 'Log in instead'\n      })\n    })]\n  });\n}\nexport default AuthContent;\nvar styles = StyleSheet.create({\n  authContent: {\n    marginTop: 64,\n    marginHorizontal: 32,\n    padding: 16,\n    borderRadius: 8,\n    backgroundColor: Colors.primary800,\n    elevation: 2,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 1,\n      height: 1\n    },\n    shadowOpacity: 0.35,\n    shadowRadius: 4\n  },\n  buttons: {\n    marginTop: 8\n  }\n});","map":{"version":3,"names":["useState","Alert","StyleSheet","View","FlatButton","AuthForm","Colors","jsx","_jsx","jsxs","_jsxs","AuthContent","_ref","isLogin","onAuthenticate","_useState","email","password","confirmEmail","confirmPassword","_useState2","_slicedToArray","credentialsInvalid","setCredentialsInvalid","switchAuthModeHandler","submitHandler","credentials","trim","emailIsValid","includes","passwordIsValid","length","emailsAreEqual","passwordsAreEqual","alert","style","styles","authContent","children","onSubmit","buttons","onPress","create","marginTop","marginHorizontal","padding","borderRadius","backgroundColor","primary800","elevation","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius"],"sources":["/home/mind/maulik/react/AuthReactProject/components/Auth/AuthContent.js"],"sourcesContent":["import { useState } from 'react';\nimport { Alert, StyleSheet, View } from 'react-native';\n\nimport FlatButton from '../ui/FlatButton';\nimport AuthForm from './AuthForm';\nimport { Colors } from '../../constants/styles';\n\nfunction AuthContent({ isLogin, onAuthenticate }) {\n\n  const [credentialsInvalid, setCredentialsInvalid] = useState({\n    email: false,\n    password: false,\n    confirmEmail: false,\n    confirmPassword: false,\n  });\n\n  function switchAuthModeHandler() {\n    // Todo\n  }\n\n  function submitHandler(credentials) {\n    let { email, confirmEmail, password, confirmPassword } = credentials;\n\n    email = email.trim();\n    password = password.trim();\n\n    const emailIsValid = email.includes('@');\n    const passwordIsValid = password.length > 6;\n    const emailsAreEqual = email === confirmEmail;\n    const passwordsAreEqual = password === confirmPassword;\n\n    if (\n      !emailIsValid ||\n      !passwordIsValid ||\n      (!isLogin && (!emailsAreEqual || !passwordsAreEqual))\n    ) {\n      Alert.alert('Invalid input', 'Please check your entered credentials.');\n      setCredentialsInvalid({\n        email: !emailIsValid,\n        confirmEmail: !emailIsValid || !emailsAreEqual,\n        password: !passwordIsValid,\n        confirmPassword: !passwordIsValid || !passwordsAreEqual,\n      });\n      return;\n    }\n    onAuthenticate({ email, password });\n  }\n\n  return (\n    <View style={styles.authContent}>\n      <AuthForm\n        isLogin={isLogin}\n        onSubmit={submitHandler}\n        credentialsInvalid={credentialsInvalid}\n      />\n      <View style={styles.buttons}>\n        <FlatButton onPress={switchAuthModeHandler}>\n          {isLogin ? 'Create a new user' : 'Log in instead'}\n        </FlatButton>\n      </View>\n    </View>\n  );\n}\n\nexport default AuthContent;\n\nconst styles = StyleSheet.create({\n  authContent: {\n    marginTop: 64,\n    marginHorizontal: 32,\n    padding: 16,\n    borderRadius: 8,\n    backgroundColor: Colors.primary800,\n    elevation: 2,\n    shadowColor: 'black',\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.35,\n    shadowRadius: 4,\n  },\n  buttons: {\n    marginTop: 8,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}